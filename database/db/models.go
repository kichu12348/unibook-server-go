// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ApprovalStatus string

const (
	ApprovalStatusPending  ApprovalStatus = "pending"
	ApprovalStatusApproved ApprovalStatus = "approved"
	ApprovalStatusRejected ApprovalStatus = "rejected"
)

func (e *ApprovalStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApprovalStatus(s)
	case string:
		*e = ApprovalStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ApprovalStatus: %T", src)
	}
	return nil
}

type NullApprovalStatus struct {
	ApprovalStatus ApprovalStatus `json:"approval_status"`
	Valid          bool           `json:"valid"` // Valid is true if ApprovalStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApprovalStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ApprovalStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApprovalStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApprovalStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApprovalStatus), nil
}

type CollaborationStatus string

const (
	CollaborationStatusPending  CollaborationStatus = "pending"
	CollaborationStatusAccepted CollaborationStatus = "accepted"
	CollaborationStatusRejected CollaborationStatus = "rejected"
)

func (e *CollaborationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CollaborationStatus(s)
	case string:
		*e = CollaborationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CollaborationStatus: %T", src)
	}
	return nil
}

type NullCollaborationStatus struct {
	CollaborationStatus CollaborationStatus `json:"collaboration_status"`
	Valid               bool                `json:"valid"` // Valid is true if CollaborationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCollaborationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CollaborationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CollaborationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCollaborationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CollaborationStatus), nil
}

type EventStatus string

const (
	EventStatusDraft           EventStatus = "draft"
	EventStatusPendingApproval EventStatus = "pending_approval"
	EventStatusConfirmed       EventStatus = "confirmed"
	EventStatusCancelled       EventStatus = "cancelled"
)

func (e *EventStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventStatus(s)
	case string:
		*e = EventStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EventStatus: %T", src)
	}
	return nil
}

type NullEventStatus struct {
	EventStatus EventStatus `json:"event_status"`
	Valid       bool        `json:"valid"` // Valid is true if EventStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EventStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventStatus), nil
}

type UserRole string

const (
	UserRoleCollegeAdmin UserRole = "college_admin"
	UserRoleForumHead    UserRole = "forum_head"
	UserRoleTeacher      UserRole = "teacher"
	UserRoleStudent      UserRole = "student"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type College struct {
	ID         uuid.UUID        `json:"id"`
	Name       string           `json:"name"`
	DomainName pgtype.Text      `json:"domain_name"`
	HasPaid    bool             `json:"has_paid"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

type Event struct {
	ID               uuid.UUID        `json:"id"`
	Name             string           `json:"name"`
	Description      pgtype.Text      `json:"description"`
	StartTime        pgtype.Timestamp `json:"start_time"`
	EndTime          pgtype.Timestamp `json:"end_time"`
	Status           EventStatus      `json:"status"`
	CreatedAt        pgtype.Timestamp `json:"created_at"`
	UpdatedAt        pgtype.Timestamp `json:"updated_at"`
	BannerImage      pgtype.Text      `json:"banner_image"`
	ResizeMode       pgtype.Text      `json:"resize_mode"`
	RegistrationLink pgtype.Text      `json:"registration_link"`
	CollegeID        uuid.UUID        `json:"college_id"`
	VenueID          pgtype.UUID      `json:"venue_id"`
	OrganizerID      uuid.UUID        `json:"organizer_id"`
	ForumID          uuid.UUID        `json:"forum_id"`
}

type EventCollaborator struct {
	ID                   uuid.UUID           `json:"id"`
	Status               CollaborationStatus `json:"status"`
	EventID              uuid.UUID           `json:"event_id"`
	CollaboratingForumID uuid.UUID           `json:"collaborating_forum_id"`
	CreatedAt            pgtype.Timestamp    `json:"created_at"`
}

type EventStaffAssignment struct {
	ID             uuid.UUID          `json:"id"`
	AssignmentRole pgtype.Text        `json:"assignment_role"`
	Status         NullApprovalStatus `json:"status"`
	EventID        uuid.UUID          `json:"event_id"`
	UserID         uuid.UUID          `json:"user_id"`
	CreatedAt      pgtype.Timestamp   `json:"created_at"`
}

type Forum struct {
	ID          uuid.UUID        `json:"id"`
	Name        string           `json:"name"`
	Description pgtype.Text      `json:"description"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	CollegeID   uuid.UUID        `json:"college_id"`
}

type ForumHead struct {
	UserID     uuid.UUID `json:"user_id"`
	ForumID    uuid.UUID `json:"forum_id"`
	IsVerified bool      `json:"is_verified"`
}

type SuperAdmin struct {
	ID           uuid.UUID        `json:"id"`
	FullName     string           `json:"full_name"`
	Email        string           `json:"email"`
	PasswordHash string           `json:"password_hash"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}

type User struct {
	ID                       uuid.UUID        `json:"id"`
	FullName                 string           `json:"full_name"`
	Email                    string           `json:"email"`
	PasswordHash             string           `json:"password_hash"`
	Role                     UserRole         `json:"role"`
	CreatedAt                pgtype.Timestamp `json:"created_at"`
	ApprovalStatus           ApprovalStatus   `json:"approval_status"`
	IsEmailVerified          bool             `json:"is_email_verified"`
	EmailVerificationToken   pgtype.Text      `json:"email_verification_token"`
	EmailVerificationExpires pgtype.Timestamp `json:"email_verification_expires"`
	PasswordResetToken       pgtype.Text      `json:"password_reset_token"`
	PasswordResetExpires     pgtype.Timestamp `json:"password_reset_expires"`
	CollegeID                uuid.UUID        `json:"college_id"`
}

type Venue struct {
	ID              uuid.UUID        `json:"id"`
	Name            string           `json:"name"`
	Capacity        int32            `json:"capacity"`
	LocationDetails pgtype.Text      `json:"location_details"`
	IsActive        pgtype.Bool      `json:"is_active"`
	CreatedAt       pgtype.Timestamp `json:"created_at"`
	CollegeID       uuid.UUID        `json:"college_id"`
}
